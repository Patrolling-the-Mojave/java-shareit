CREATE TABLE IF NOT EXISTS users (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  CONSTRAINT uq_user_email UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS request (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  description VARCHAR(1000) NOT NULL,
  requester_id INTEGER NOT NULL,
  created TIMESTAMP NOT NULL,
  CONSTRAINT fk_request_user FOREIGN KEY (requester_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS item (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(1000),
  available BOOLEAN NOT NULL DEFAULT TRUE,
  owner_id INTEGER NOT NULL,
  request_id INTEGER,
  CONSTRAINT fk_item_user FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_item_request FOREIGN KEY (request_id) REFERENCES request(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS booking (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  start_at TIMESTAMP NOT NULL,
  end_at TIMESTAMP NOT NULL,
  status VARCHAR(20) NOT NULL,
  booker_id INTEGER NOT NULL,
  item_id INTEGER NOT NULL,
  CONSTRAINT fk_booking_user FOREIGN KEY (booker_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_booking_item FOREIGN KEY (item_id) REFERENCES item(id) ON DELETE CASCADE,
  CONSTRAINT chk_booking_dates CHECK (end_at > start_at),
  CONSTRAINT chk_booking_status CHECK (status IN ('WAITING', 'APPROVED', 'REJECTED', 'CANCELED'))
);

CREATE TABLE IF NOT EXISTS comments (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  text VARCHAR(1000) NOT NULL,
  author_id INTEGER NOT NULL,
  item_id INTEGER NOT NULL,
  created_at TIMESTAMP NOT NULL,
  CONSTRAINT fk_comment_user FOREIGN KEY (author_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_comment_item FOREIGN KEY (item_id) REFERENCES item(id) ON DELETE CASCADE
);